# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Deploying

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'                # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build
      run: |
        npm install
        npm run build --if-present
        ls
    - name: deploy
      uses: D3rHase/rsync-deploy-action@v0.2
      with:
        HOST: ${{secrets.REMOTE_HOST}}                             # Remote server address / ip - Required: true
        PORT: ${{secrets.REMOTE_PORT}}                             # Remote server port -  Default: 22 - Required: false
        USER: ${{secrets.REMOTE_USER}}                             # Remote server user - Required: true
        PRIVATE_SSH_KEY: ${{secrets.SSH_PRIVATE_KEY}}       # Private ssh key registered on the remote server - Required: true
        REPOSITORY_PATH: ${{ vars.SOURCE }}       # Repository path of the file-s you want to upload - Default: * - Required: true
        SERVER_PATH: ${{ vars.TARGET }}               # Server destination / path, where the file-s will be uploaded to - Default: ~/ - Required: false

  # deploy:
  #   permissions:
  #     contents: none
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
    # Deploy
    # - name: Prepare SSH to work with the remote server
    #   run: |
    #     cd ~ && mkdir .ssh &&
    #     touch ~/.ssh/known_hosts &&
    #     echo "${{ secrets.HOST_KEY }}" > ~/.ssh/known_hosts
    # - name: ssh deploy
    #   uses: AEnterprise/rsync-deploy@v1.0
    #   env:
    #     DEPLOY_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    #     ARGS: "-e -c -r --delete"
    #     SERVER_PORT: 22
    #     FOLDER: "./public"
    #     SERVER_IP: ${{ secrets.REMOTE_HOST }}
    #     USERNAME: ${{ secrets.REMOTE_USER }}
    #     SERVER_DESTINATION: "www/test-deploy"
    # - name: SSH Server Deploy
    #   uses: kostya-ten/ssh-server-deploy@v4
    #   with:
    #     host: ${{ secrets.REMOTE_HOST }}
    #     port: ${{ secrets.REMOTE_PORT }}
    #     username: ${{ secrets.REMOTE_USER }}
    #     password: ${{ secrets.REMOTE_PASSWORD }}
    #     scp_source: ${{ vars.SOURCE }}
    #     scp_target: ${{ vars.TARGET }}
    #     before_script: |
    #       ls
    #       df -h
    #     after_script: |
    #       whoami